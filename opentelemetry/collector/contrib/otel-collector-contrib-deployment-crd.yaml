---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: contrib-deployment
  namespace: dynatrace
spec:
  envFrom:
  - secretRef:
      name: dynatrace-otelcol-dt-api-credentials
  mode: "deployment"
  image: "otel/opentelemetry-collector-contrib:0.103.0"
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  observability:
    metrics:
      enableMetrics: true
  resources:
    limits:
      memory: 512Mi
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 5s
            static_configs:
            - targets:
              - ${MY_POD_IP}:8888
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      k8s_cluster:
        collection_interval: 60s
        node_conditions_to_report: [ "Ready", "MemoryPressure", "DiskPressure" ]
        allocatable_types_to_report: [ "cpu","memory" ]
        metadata_collection_interval: 5m
      k8sobjects/events:
        auth_type: serviceAccount
        objects:
          - name: events
            mode: watch
            namespaces: [astronomy-shop,dynatrace]

    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size: 800
      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30
      cumulativetodelta: {}
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.replicaset.name
            - k8s.statefulset.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
            - k8s.container.name
            - container.id
            - container.image.name
            - container.image.tag
          labels:
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: app.label.instance
              key: app.kubernetes.io/instance
              from: pod
            - tag_name: app.label.name
              key: app.kubernetes.io/name
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection
      resourcedetection/eks:
        # detectors: [env, eks]
        detectors: [eks]
        timeout: 2s
        override: false
        aks:
          resource_attributes:
            k8s.cluster.name:
              enabled: true
      resource:
        attributes:
        - key: k8s.pod.ip
          action: delete
        - key: telemetry.sdk.name
          value: opentelemetry
          action: insert
        - key: dynatrace.otel.collector
          value: contrib-deployment-collector
          action: insert
        - key: dt.security_context
          from_attribute: k8s.cluster.name
          action: insert

    exporters:
      otlphttp/dynatrace:
        endpoint: "${env:DT_ENDPOINT}"
        headers:
          Authorization: "Api-Token ${env:DT_API_TOKEN}"
      debug:
        verbosity: basic
        sampling_initial: 5
        sampling_thereafter: 20

    service:
      telemetry:
        logs:
          level: "info"
          encoding: "json"
        metrics:
          level: "normal"
          address: ${MY_POD_IP}:8888
      pipelines:
        metrics:
          receivers: [prometheus,otlp,k8s_cluster]
          processors: [memory_limiter,k8sattributes,resourcedetection/aks,resource,cumulativetodelta,batch]
          exporters: [otlphttp/dynatrace,debug]
        traces:
          receivers: [otlp]
          processors: [memory_limiter,k8sattributes,resourcedetection/aks,resource,batch]
          exporters: [otlphttp/dynatrace,debug]
        logs:
          receivers: [otlp,k8sobjects/events]
          processors: [memory_limiter,k8sattributes,resourcedetection/aks,resource,batch]
          exporters: [otlphttp/dynatrace,debug]
